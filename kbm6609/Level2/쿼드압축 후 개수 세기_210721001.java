package Quad_Compression;

import java.util.HashMap;

public class QuadCompression_210721001 {
    public static void main(String[] args) {
        int[][] arr = {
                {1, 1, 1, 1, 1, 1, 1, 1,1, 1, 1, 1, 1, 1, 1, 1},
                {0, 1, 1, 1, 1, 1, 1, 1,0, 1, 1, 1, 1, 1, 1, 1},
                {0, 0, 0, 0, 1, 1, 1, 1,0, 0, 0, 0, 1, 1, 1, 1},
                {0, 1, 0, 0, 1, 1, 1, 1,0, 1, 0, 0, 1, 1, 1, 1},
                {0, 0, 0, 0, 0, 0, 1, 1,0, 0, 0, 0, 0, 0, 1, 1},
                {0, 0, 0, 0, 0, 0, 0, 1,0, 0, 0, 0, 0, 0, 0, 1},
                {0, 0, 0, 0, 1, 0, 0, 1,0, 0, 0, 0, 1, 0, 0, 1},
                {0, 0, 0, 0, 1, 1, 1, 1,0, 0, 0, 0, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1,1, 1, 1, 1, 1, 1, 1, 1},
                {0, 1, 1, 1, 1, 1, 1, 1,0, 1, 1, 1, 1, 1, 1, 1},
                {0, 0, 0, 0, 1, 1, 1, 1,0, 0, 0, 0, 1, 1, 1, 1},
                {0, 1, 0, 0, 1, 1, 1, 1,0, 1, 0, 0, 1, 1, 1, 1},
                {0, 0, 0, 0, 0, 0, 1, 1,0, 0, 0, 0, 0, 0, 1, 1},
                {0, 0, 0, 0, 0, 0, 0, 1,0, 0, 0, 0, 0, 0, 0, 1},
                {0, 0, 0, 0, 1, 0, 0, 1,0, 0, 0, 0, 1, 0, 0, 1},
                {0, 0, 0, 0, 1, 1, 1, 1,0, 0, 0, 0, 1, 1, 1, 1}
        };

        int[] answer=new int[2];
        int t=2;
        for(int i=2;i<=arr.length;i*=2){
            for (int j = i - 1; j < arr.length; j += i) {
                for (int k = i - 1; k < arr.length; k += i) {
                    if(i==2){
                        answer[arr[j-(i/2)][k]]++;
                        answer[arr[j][k-(i/2)]]++;
                        answer[arr[j-(i/2)][k-(i/2)]]++;
                        answer[arr[j][k]]++;
                    }
                    if(arr[j][k]>0){
                        if (arr[j - (i / 2)][k] == i / 2 && arr[j][k - (i / 2)] == i / 2 && arr[j - (i / 2)][k - (i / 2)] == i / 2 && arr[j][k] == i / 2) {
                            arr[j][k] =i;
                            answer[1]-=3;
                        }
                    }else{
                        if (arr[j - (i / 2)][k] == (-1)*i / 2+1 && arr[j][k - (i / 2)] ==(-1)*i / 2 +1 && arr[j - (i / 2)][k - (i / 2)] ==(-1)*i / 2+1&& arr[j][k] == (-1)*i/ 2+1) {
                            arr[j][k] = i * (-1)+1;
                            answer[0]-=3;
                        }
                    }
                }
            }


        }
        for (int i = 0; i < 2; i++) {
            System.out.println(answer[i]);
        }


    }
}
